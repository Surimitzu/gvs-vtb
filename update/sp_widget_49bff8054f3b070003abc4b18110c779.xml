<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <client_script><![CDATA[function() {
	/* widget controller */
	var c = this;

}]]></client_script>
        <controller_as>c</controller_as>
        <css>.gvs-task-card {
	height: 10em;
  overflow: hidden;
  text-overflow: ellipsis;
}</css>
        <data_table>sp_instance</data_table>
        <demo_data>{
	"options":{
		"table_name": "incident",
			"filter" : "active=true",
				"limit": 10,
					"show_label": "true"
	}
}</demo_data>
        <description>Display task records as cards.&#13;
The table name and filter is provided by url params table &amp; filter</description>
        <docs/>
        <field_list>title</field_list>
        <has_preview>true</has_preview>
        <id>gvs-vtb-task-list</id>
        <internal>false</internal>
        <link/>
        <name>GVS_VTB Task List</name>
        <option_schema>[{"hint":"Specify maximum number of entries to fetch","name":"limit","default_value":"10","label":"Number of records to display","type":"integer"},{"name":"show_label","default_value":"true","label":"Show table name","type":"boolean"}]</option_schema>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function () {
	
	//read url params
	data.tableName = $sp.getParameter('table') || options.table_name;
	var filter = $sp.getParameter('filter') || options.filter || '';
	var limit = options.limit || 10;
	//check the empty page in designer
	if (gs.nil($sp.getParameter('id'))){
		data.tableName = 'incident';
	}

	//set the field names to read
	var fieldNames = 'number, short_description, priority, assigned_to, state, sys_id';
	//fetch data from server
	data.isValid = false;
	data.tasks = getTaskRecords(data.tableName, filter);
	
	
	/**
	 * returns an array of record objects from the specified
	 * gliderecord table name and filter
	 * @param   {string} tableName sys_name of the table
	 * @param   {string} filter    encoded query
	 * @returns {Array}  array of object record representation, returns empty array if not valid
	 *                   or zero records found
	 */
	function getTaskRecords(tableName, filter) {
		var records = [];
		if (!gs.nil(tableName)) {
			var recordGR = new GlideRecordSecure(data.tableName);
			if (recordGR.isValid()) {
				data.isValid = true;
				data.label = recordGR.getClassDisplayValue();
				recordGR.addEncodedQuery(filter);
				recordGR.setLimit(limit);
				recordGR.query();
				while (recordGR.next()) {
					records.push($sp.getFieldsObject(recordGR, fieldNames));
				}
			}
		} else {
			return [];
		}
		return records;
	}
})();
]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-01-19 19:21:34</sys_created_on>
        <sys_id>49bff8054f3b070003abc4b18110c779</sys_id>
        <sys_mod_count>102</sys_mod_count>
        <sys_name>GVS_VTB Task List</sys_name>
        <sys_package display_value="[GVS] Visual Task Board" source="x_52098_gvs_vtb">933abc014f3b070003abc4b18110c713</sys_package>
        <sys_policy/>
        <sys_scope display_value="[GVS] Visual Task Board">933abc014f3b070003abc4b18110c713</sys_scope>
        <sys_update_name>sp_widget_49bff8054f3b070003abc4b18110c779</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-01-23 12:05:51</sys_updated_on>
        <template><![CDATA[<div ng-if="!data.isValid" class="alert alert-danger">
	<button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;
</button> ${gvs.vtb.widget.task_list.no_table_specified}
</div>

<div ng-if="data.isValid" class="container-fluid m-t">
	<h1 ng-if="options.show_label === 'true'">
		{{::data.label}}
	</h1>

	<div ng-if="data.tasks.length == 0" class="well well-lg">
		${gvs.vtb.widget.task_list.no_records_found}
	</div>


	<div ng-if="data.tasks.length>0" class="row">
		<pre>{{data.tasks | json}}</pre>
	</div>
</div>
]]></template>
    </sp_widget>
</record_update>
